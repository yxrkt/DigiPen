Introduction

    This framework opens a window and draws a scene (via either OpenGL
    or student written code), and allows for some simple
    mouse/keyboard interactions.

    This framework contains a file named "scene.cpp", a new version of
    which will come with each project.  This file implements the scene
    needed to test and demonstrate its specific project.

    The framework also contains a nearly empty file named "render.cpp"
    which is where all student rendering code is expected to go.

    Details of these files and others follow:

Overview

    When the freamework starts up it goes through the following steps:

    * Open a window via GLUT and hooks up various mouse and keyboard
      callbacks.
    
    * Call CreateScene to create an object of type Scene which
      contains all the information needed to define the scene. This
      procedure is supplied anew for each project.

    * Call PreprocessScene to give the student a place to perform any
      needed pre-processing steps before the framework starts calling
      the drawing code.  This procedure is originally empty.

    * Enter the main event loop which handles all user interactions
      and calls DrawScene whenever the window needs redrawing.
      DrawScene is where the student rendering code goes.

    * DrawScene may, if the student wishes, make use of a procedure
      called "DrawSceneWithOpenGL" to draw the scene using OpenGL.
      This allows the user to contrast OpenGL and student rendering
      code.  The framework and the original contents of DrawScene are
      set up to toggle between OpenGl and the student's drawing when
      the 'g' key is hit.

Interaction

    Once the window is opened, and the scene is created, the even loop
    handles the following mouse and keyboard interactions:

      * Left mouse button: Rotates the scene. (Using what I call the
        turntable rotation model.)

      * Mouse wheel: Zoom the scene in/out.

      * Right mouse button: Translates the scene around the screen.

      * Keyboard 'q', and ESC: Quit the program.

      * Keyboard 'g': Toggles the scene.UseOpenGLRendering bool flag.
        This flag is meant to be used to choose between OpenGL
        rendering and student rendering code.

      * Keyboard 'a': Toggles the scene.UseAntiAliasing bool flag.
        This flag is meant to be used to choose between randering with
        and withour anti-aliasing.

      * The digit keys '1', '2', etc may be used to change the
        generated scene.  

The environment of DrawScene

    Since all your code is called from within DrawScene, you need a
    clear understanding of the parameters to, and environment of,
    DrawScene.  The framework ensures the following at the time of the
    call to DrawScene.

    * The signature of DrawScene is 
        void DrawScene(Scene& scene, int width, int height);

    * The parameter "scene" contains the scene to be drawn. (More on
      that later.)  This includes the polygons in world coordinates,
      the position and color of any lights, and a 4x4 matrices for the
      viewing and projection transformations, and some boolean
      flags.

    * The parameters height and width contain the size of the window.
      These may vary from call to call, but you can be assured that at
      the time of the call, these are the size of the window into
      which you are expected to draw.

    * When DrawScene is called, all pixels will be cleared to the
      background color.

    * When DrawScene returns, the framework will perform the GLUT
      operation (glutSwapBuffers) needed to actually get the new image
      visible on the screen.

    * When DrawScene is running, the OpenGL viewport is set up such
      that individual pixels can be accessed with integer coordinates.
      (0,0) is the lower left corner, and (width-1,height-1) is the
      upper right. Code to color pixels will look something like this:

         glBegin(GL_POINTS);   // Put OpenGL in point drawing mode
         for <whatever>
             ... lots-o-code ...
             glColor3f(r,g,b); // Set color for next pixel
             glVertex2i(x,y);  // Put that color at pixel (x,y)
         glEnd();              // End of point drawing mode

Data structures:  (See scenelib.h for details.)

  A Scene contains:
    objects: a vector of Objects,
    lights: a vector of Lights,
    viewing: the viewing Transformation,
    projection: the projection (perspective) Transformation,
    and several other attributes.

  An Object contains:
    polygons: a vector of APolygons,
    Kd, Ks, n: and some lighting attributes,
    texture, bump, refl: attributes (type Texture),
    closed: a boolean

  An APolygons is simply:
    a vector of Vertices.

  A Vertex contains:
    V: position (type Vector4D)
    N: a vertex normal (type Vector3D)
    u,v: texture coordinate (type float)
    prevIndex: in integer index of the other end of this vertex's edge.

  A Light contains:
    position: position of a light (type Point3D)
    color: the color of the light (type Color)

Processing a Scene

    A polygon may have several loops of vertices defined by the
    prevIndex values.  If so, the first loop is considered to be
    the outside of the polygon and any other loops are considered
    to be holes in the polygon.

    The code to process all polygons in a scene will look like this:
        for (unsigned int k=0;  k<scene.objects.size();  k++) {
            Object& obj = scene.objects[k];
            for (unsigned int j=0;  j<obj.polygons.size();  j++) {
                APolygon& poly = obj.polygons[j];
                // Do something with poly

    The code to process all edges of a polygon will look like this:
        is_hole_edge = false;
        for (unsigned int i=0;  i<poly.size(); i++)  {
            if (i && poly[i].prevIndex != i-1)
                // This (and all subsequent edges) are HOLE edges
                // BUT you may NOT need to know or use this information
                is_hole_edge = true;
            int prev = poly[i].prevIndex;
            Vector4D P = poly[prev].V;
            Vector4D Q = poly[i].V;
            // Now P to Q is one edge of the polygon
            // Edge is outside or hole edge according to is_hole_edge

    The code to transform a world coordinate Vertex4D W to screen
    coordinates, then to pixel coordinates will look like this:
        Vector4D T = scene.viewing.Transform(W);
        Vector3D S = scene.projection.Transform(T).Hdiv();
        S[0] = (S[0]+1.0)*width/2.0;
        S[1] = (S[1]+1.0)*height/2.0;

    The code to transform a pixel coordinate point (x,y,z) to
    projection coordinates, then to world coordinates will look like
    this:
        S = Vector4D(x*2/width-1.0, y*2/height-1.0, z)
        Vector4D T = scene.projection.InverseTransform(S);
        Point3D W = scene.viewing.InverseTransform(T).Hdiv();

    The code to get the world space coordinates of the eye is
        S = Vector4D(0.0, 0.0, 0.0, 1.0))
        Point3D Eye = scene.viewing.InverseTransform(S).Hdiv();

    The ambient light
        scene.ambient -- type Color

    The number of lights, and the position and color of light i:
        scene.lights.size() -- type int
        scene.lights[i].position -- type Vector3D
        scene.lights[i].color -- type Color

    An object's diffuse color, its specular color, and the shininess
    coefficient:
       obj.Kd -- type Color
       obj.Ks -- type Color
       obj.n  -- type int
